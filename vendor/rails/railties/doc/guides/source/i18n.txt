The Rails Internationalization (I18n) API
=========================================

The Ruby I18n (shorthand for _internationalization_) gem which is shipped with Ruby on Rails (starting from Rails 2.2) provides an easy-to-use and extensible framework for translating your application to a single custom language other than English or providing multi-language support in your application.

NOTE: The Ruby I18n framework provides you with all neccessary means for internationalization/localization of your Rails application. You may, however, use any of various plugins and extensions available. See Rails http://rails-i18n.org/wiki[I18n Wiki] for more information.

== How I18n in Ruby on Rails works

Internationalization is a complex problem. Natural languages differ in so many ways (eg. in pluralization rules) that it is hard to provide tools for solving all problems at once. For that reason the Rails I18n API focuses on:

* providing support for English and similar languages out of the box
* making it easy to customize and extend everything for other languages

As part of this solution, *every static string in the Rails framework* -- eg. ActiveRecord validation messages, time and date formats -- *has been internationalized*, so _localization_ of a Rails application means "over-riding" these defaults.

=== The overall architecture of the library

Thus, the Ruby I18n gem is split into two parts:

* The public API of the i18n framework -- a Ruby module with public methods and definitions how the library works
* A default backend (which is intentionally named _Simple_ backend) that implements these methods

As a user you should always only access the public methods on the I18n module, but it is useful to know about the capabilities of the backend.

NOTE: It is possible (or even desirable) to swap the shipped Simple backend with a more powerful one, which would store translation data in a relational database, GetText dictionary, or similar. See section <<_using_different_backends,Using different backends>> below.

=== The public I18n API

The most important methods of the I18n API are:

[source, ruby]
-------------------------------------------------------
translate         # Lookup text translations
localize          # Localize Date and Time objects to local formats
-------------------------------------------------------

These have the aliases #t and #l so you can use them like this:

[source, ruby]
-------------------------------------------------------
I18n.t 'store.title'
I18n.l Time.now
-------------------------------------------------------

There are also attribute readers and writers for the following attributes:

[source, ruby]
-------------------------------------------------------
load_path         # Announce your custom translation files
locale            # Get and set the current locale
default_locale    # Get and set the default locale
exception_handler # Use a different exception_handler
backend           # Use a different backend
-------------------------------------------------------

So, let's internationalize a simple Rails application from the ground up in the next chapters!

== Setup the Rails application for internationalization

There are just a few, simple steps to get up and running with I18n support for your application.

=== Configure the I18n module

Following the _convention over configuration_ philosophy, Rails will set-up your application with reasonable defaults. If you need different settings, you can overwrite them easily.

Rails adds all +.rb+ and +.yml+ files from +config/locales+ directory to your *translations load path*, automatically.

See the default +en.yml+ locale in this directory, containing a sample pair of translation strings:

[source, ruby]
-------------------------------------------------------
en:
  hello: "Hello world"
-------------------------------------------------------

This means, that in the +:en+ locale, the key _hello_ will map to _Hello world_ string. Every string inside Rails is internationalized in this way, see for instance ActiveRecord validation messages in the http://github.com/rails/rails/blob/master/activerecord/lib/active_record/locale/en.yml[+activerecord/lib/active_record/locale/en.yml+] file or time and date formats in the http://github.com/rails/rails/blob/master/activesupport/lib/active_support/locale/en.yml[+activesupport/lib/active_support/locale/en.yml+] file. You can use YAML or standard Ruby Hashes to store translations in the default (Simple) backend.

The I18n library will use *English* as a *default locale*, ie. if you don't set a different locale, +:en+ will be used for looking up translations.

The *translations load path* (+I18n.load_path+) is just a Ruby Array of paths to your translation files that will be loaded automatically and available in your application. You can pick whatever directory and translation file naming scheme makes sense for you. 

NOTE: The backend will lazy-load these translations when a translation is looked up for the first time. This makes it possible to just swap the backend with something else even after translations have already been announced.

The default +environment.rb+ files has instruction how to add locales from another directory and how to set different default locale. Just uncomment and edit the specific lines.

[source, ruby]
-------------------------------------------------------
# The internationalization framework can be changed
# to have another default locale (standard is :en) or more load paths.
# All files from config/locales/*.rb,yml are added automatically.
# config.i18n.load_path << Dir[File.join(RAILS_ROOT, 'my', 'locales', '*.{rb,yml}')]
# config.i18n.default_locale = :de
-------------------------------------------------------

=== Optional: custom I18n configuration setup

For the sake of completeness, let's mention that if you do not want to use the +environment.rb+ file for some reason, you can always wire up things manually, too.

To tell the I18n library where it can find your custom translation files you can specify the load path anywhere in your application - just make sure it gets run before any translations are actually looked up. You might also want to change the default locale. The simplest thing possible is to put the following into an *initializer*:

[source, ruby]
-------------------------------------------------------
# in config/initializer/locale.rb

# tell the I18n library where to find your translations
I18n.load_path << Dir[ File.join(RAILS_ROOT, 'lib', 'locale', '*.{rb,yml}') ]

# set default locale to something else then :en
I18n.default_locale = :pt
-------------------------------------------------------

=== Setting and passing the locale

By default the I18n library will use :en (English) as a I18n.default_locale for looking up translations (if you do not specify a locale for a lookup).

If you want to translate your Rails application to a single language other than English you can set I18n.default_locale to your locale. If you want to change the locale on a per-request basis though you can set it in a before_filter on the ApplicationController like this:

[source, ruby]
-------------------------------------------------------
before_filter :set_locale
def set_locale
  # if this is nil then I18n.default_locale will be used
  I18n.locale = params[:locale] 
end
-------------------------------------------------------

This will already work for URLs where you pass the locale as a query parameter as in example.com?locale=pt (which is what Google also does). 

TIP: For other URL designs, see http://rails-i18n.org/wiki/pages/how-to-encode-the-current-locale-in-the-url[How to encode the current locale in the URL].

Now you've initialized I18n support for your application and told it which locale should be used. With that in place you're now ready for the really interesting stuff.

== Internationalize your application

The process of "internationalization" usually means to abstract all strings and other locale specific bits out of your application. The process of "localization" means to then provide translations and localized formats for these bits. <<1>>

So, let's internationalize something. You most probably have something like this in one of your applications:

[source, ruby]
-------------------------------------------------------
# config/routes.rb
ActionController::Routing::Routes.draw do |map|
  map.root :controller => 'home', :action => 'index'
end
  
# app/controllers/home_controller.rb
class HomeController < ApplicationController
  def index
    flash[:notice] = "Hello flash!"
  end
end

# app/views/home/index.html.erb
<h1>Hello world!</h1>
<p><%= flash[:notice] %></p>
-------------------------------------------------------

image:images/i18n/demo_untranslated.png[rails i18n demo untranslated]

=== Adding Translations

Obviously there are two strings that are localized to English. In order to internationalize this code replace these strings with calls to Rails' #t helper with a key that makes sense for the translation:

[source, ruby]
-------------------------------------------------------
# app/controllers/home_controller.rb
class HomeController < ApplicationController
  def index
    flash[:notice] = t(:hello_flash)
  end
end

# app/views/home/index.html.erb
<h1><%=t :hello_world %></h1>
<p><%= flash[:notice] %></p>
-------------------------------------------------------

When you now render this view it will show an error message that tells you that the translations for the keys :hello_world and :hello_flash are missing.

image:images/i18n/demo_translation_missing.png[rails i18n demo translation missing]

NOTE: Rails adds a +t+ (+translate+) helper method to your views so that you do not need to spell out +I18n.t+ all the time. Additionally this helper will catch missing translations and wrap the resulting error message into a &lt;span class="translation_missing"&gt;.

So let's add the missing translations (i.e. do the "localization" part):

[source, ruby]
-------------------------------------------------------
# config/locale/en.yml
en:
  hello_world: Hello World
  hello_flash: Hello Flash
  
# config/locale/pirate.yml
pirate:
  hello_world: Ahoy World
  hello_flash: Ahoy Flash
-------------------------------------------------------  

There you go. Because you haven't changed the default_locale I18n will use English. Your application now shows:

image:images/i18n/demo_translated_english.png[rails i18n demo translated to english]

And when you change the URL to pass the pirate locale you get:

image:images/i18n/demo_translated_pirate.png[rails i18n demo translated to pirate]

NOTE You need to restart the server when you add new locale files.

=== Adding Date/Time formats

Ok, let's add a timestamp to the view so we can demo the date/time localization feature as well. To localize the time format you pass the Time object to I18n.l or (preferably) use Rails' #l helper. You can pick a format by passing the :format option, by default the :default format is used.

[source, ruby]
-------------------------------------------------------
# app/views/home/index.html.erb
<h1><%=t :hello_world %></h1>
<p><%= flash[:notice] %></p
<p><%= l Time.now, :format => :short %></p>
-------------------------------------------------------

And in our pirate translations file let's add a time format (it's already there in Rails' defaults for English):

[source, ruby]
-------------------------------------------------------
# config/locale/pirate.yml
pirate:
  time:
    formats:
      short: "arrrround %H'ish"
-------------------------------------------------------

So that would give you:

image:images/i18n/demo_localized_pirate.png[rails i18n demo localized time to pirate]

NOTE Right now you might need to add some more date/time formats in order to make the I18n backend work as expected. See the http://github.com/svenfuchs/rails-i18n/tree/master/rails/locale[rails-i18n repository] for starting points.


== Overview of the I18n API features

The following purposes are covered:

* lookup translations
* interpolate data into translations
* pluralize translations
* localize dates, numbers, currency etc.

=== Looking up translations

==== Basic lookup, scopes and nested keys

Translations are looked up by keys which can be both Symbols or Strings, so these calls are equivalent:

[source, ruby]
-------------------------------------------------------
I18n.t :message
I18n.t 'message'
-------------------------------------------------------

translate also takes a :scope option which can contain one or many additional keys that will be used to specify a “namespace” or scope for a translation key:

[source, ruby]
-------------------------------------------------------
I18n.t :invalid, :scope => [:active_record, :error_messages]
-------------------------------------------------------

This looks up the :invalid message in the ActiveRecord error messages.

Additionally, both the key and scopes can be specified as dot separated keys as in:

[source, ruby]
-------------------------------------------------------
I18n.translate :"active_record.error_messages.invalid"
-------------------------------------------------------

Thus the following calls are equivalent:

[source, ruby]
-------------------------------------------------------
I18n.t 'active_record.error_messages.invalid'
I18n.t 'error_messages.invalid', :scope => :active_record
I18n.t :invalid, :scope => 'active_record.error_messages'
I18n.t :invalid, :scope => [:active_record, :error_messages]
-------------------------------------------------------

==== Defaults

When a default option is given its value will be returned if the translation is missing:

[source, ruby]
-------------------------------------------------------
I18n.t :missing, :default => 'Not here'
# => 'Not here'
-------------------------------------------------------

If the default value is a Symbol it will be used as a key and translated. One can provide multiple values as default. The first one that results in a value will be returned.

E.g. the following first tries to translate the key :missing and then the key :also_missing. As both do not yield a result the string "Not here" will be returned:

[source, ruby]
-------------------------------------------------------
I18n.t :missing, :default => [:also_missing, 'Not here']
# => 'Not here'
-------------------------------------------------------

==== Bulk and namespace lookup

To lookup multiple translations at once an array of keys can be passed:

[source, ruby]
-------------------------------------------------------
I18n.t [:odd, :even], :scope => 'active_record.error_messages'
# => ["must be odd", "must be even"]
-------------------------------------------------------

Also, a key can translate to a (potentially nested) hash as grouped translations. E.g. one can receive all ActiveRecord error messages as a Hash with:

[source, ruby]
-------------------------------------------------------
I18n.t 'active_record.error_messages'
# => { :inclusion => "is not included in the list", :exclusion => ... }
-------------------------------------------------------

=== Interpolation

In many cases you want to abstract your translations so that variables can be interpolated into the translation. For this reason the I18n API provides an interpolation feature.

All options besides :default and :scope that are passed to #translate will be interpolated to the translation:

[source, ruby]
-------------------------------------------------------
I18n.backend.store_translations :en, :thanks => 'Thanks {{name}}!'
I18n.translate :thanks, :name => 'Jeremy'
# => 'Thanks Jeremy!'
-------------------------------------------------------

If a translation uses :default or :scope as a interpolation variable an I18n::ReservedInterpolationKey exception is raised. If a translation expects an interpolation variable but it has not been passed to #translate an I18n::MissingInterpolationArgument exception is raised.


=== Pluralization

In English there's only a singular and a plural form for a given string, e.g. "1 message" and "2 messages". Other languages (http://www.unicode.org/cldr/data/charts/supplemental/language_plural_rules.html#ar[Arabic], http://www.unicode.org/cldr/data/charts/supplemental/language_plural_rules.html#ja[Japanese], http://www.unicode.org/cldr/data/charts/supplemental/language_plural_rules.html#ru[Russian] and many more) have different grammars that have additional or less http://www.unicode.org/cldr/data/charts/supplemental/language_plural_rules.html[plural forms]. Thus, the I18n API provides a flexible pluralization feature.

The :count interpolation variable has a special role in that it both is interpolated to the translation and used to pick a pluralization from the translations according to the pluralization rules defined by CLDR:

[source, ruby]
-------------------------------------------------------
I18n.backend.store_translations :en, :inbox => {
  :one => '1 message', 
  :other => '{{count}} messages'
}
I18n.translate :inbox, :count => 2
# => '2 messages'
-------------------------------------------------------

The algorithm for pluralizations in :en is as simple as:

[source, ruby]
-------------------------------------------------------
entry[count == 1 ? 0 : 1]  
-------------------------------------------------------

I.e. the translation denoted as :one is regarded as singular, the other is used as plural (including the count being zero).

If the lookup for the key does not return an Hash suitable for pluralization an I18n::InvalidPluralizationData exception is raised.

=== Setting and passing a locale

The locale can be either set pseudo-globally to I18n.locale (which uses Thread.current like, e.g., Time.zone) or can be passed as an option to #translate and #localize.

If no locale is passed I18n.locale is used:

[source, ruby]
-------------------------------------------------------
I18n.locale = :de
I18n.t :foo 
I18n.l Time.now
-------------------------------------------------------

Explicitely passing a locale:

[source, ruby]
-------------------------------------------------------
I18n.t :foo, :locale => :de
I18n.l Time.now, :locale => :de
-------------------------------------------------------

I18n.locale defaults to I18n.default_locale which defaults to :en. The default locale can be set like this:

[source, ruby]
-------------------------------------------------------
I18n.default_locale = :de
-------------------------------------------------------

== How to store your custom translations

The shipped Simple backend allows you to store translations in both plain Ruby and YAML format. <<2>>

For example a Ruby Hash providing translations can look like this:

[source, ruby]
-------------------------------------------------------
{
  :pt => {
    :foo => {
      :bar => "baz"
    }
  }
}
-------------------------------------------------------

The equivalent YAML file would look like this:

[source, ruby]
-------------------------------------------------------
pt:
  foo:
    bar: baz
-------------------------------------------------------    

As you see in both cases the toplevel key is the locale. :foo is a namespace key and :bar is the key for the translation "baz".

Here is a "real" example from the ActiveSupport en.yml translations YAML file:

[source, ruby]
-------------------------------------------------------
en:
  date:
    formats:
      default: "%Y-%m-%d"
      short: "%b %d"
      long: "%B %d, %Y"
-------------------------------------------------------

So, all of the following equivalent lookups will return the :short date format "%B %d":

[source, ruby]
-------------------------------------------------------
I18n.t 'date.formats.short'
I18n.t 'formats.short', :scope => :date
I18n.t :short, :scope => 'date.formats'
I18n.t :short, :scope => [:date, :formats]
-------------------------------------------------------

Generally we recommend using YAML as a format for storing translations. There are cases though where you want to store Ruby lambdas as part of your locale data, e.g. for special date 

=== Translations for ActiveRecord models

You can use the methods Model.human_name and Model.human_attribute_name(attribute) to transparently lookup translations for your model and attribute names.

For example when you add the following translations:

[source, ruby]
-------------------------------------------------------
en:
  activerecord:
    models:
      user: Dude
    attributes:
      user:
        login: "Handle"
      # will translate User attribute "login" as "Handle"
-------------------------------------------------------
      
Then User.human_name will return "Dude" and User.human_attribute_name(:login) will return "Handle".
      
==== Error message scopes

ActiveRecord validation error messages can also be translated easily. ActiveRecord gives you a couple of namespaces where you can place your message translations in order to provide different messages and translation for certain models, attributes and/or validations. It also transparently takes single table inheritance into account.

This gives you quite powerful means to flexibly adjust your messages to your application's needs.

Consider a User model with a validates_presence_of validation for the name attribute like this:

[source, ruby]
-------------------------------------------------------
class User < ActiveRecord::Base
  validates_presence_of :name
end
-------------------------------------------------------

The key for the error message in this case is :blank. ActiveRecord will lookup this key in the namespaces:

[source, ruby]
-------------------------------------------------------
activerecord.errors.messages.models.[model_name].attributes.[attribute_name]
activerecord.errors.messages.models.[model_name]
activerecord.errors.messages
-------------------------------------------------------

Thus, in our example it will try the following keys in this order and return the first result:

[source, ruby]
-------------------------------------------------------
activerecord.errors.messages.models.user.attributes.name.blank
activerecord.errors.messages.models.user.blank
activerecord.errors.messages.blank
-------------------------------------------------------

When your models are additionally using inheritance then the messages are looked up for the inherited model class names are looked up. 

For example, you might have an Admin model inheriting from User:

[source, ruby]
-------------------------------------------------------
class Admin < User
  validates_presence_of :name
end
-------------------------------------------------------

Then ActiveRecord will look for messages in this order:

[source, ruby]
-------------------------------------------------------
activerecord.errors.models.admin.attributes.title.blank
activerecord.errors.models.admin.blank
activerecord.errors.models.user.attributes.title.blank
activerecord.errors.models.user.blank
activerecord.errors.messages.blank
-------------------------------------------------------

This way you can provide special translations for various error messages at different points in your models inheritance chain and in the attributes, models or default scopes.

==== Error message interpolation

The translated model name and translated attribute name are always available for interpolation. 

So, for example, instead of the default error message "can not be blank" you could use the attribute name like this: "Please fill in your {{attribute}}".

count and/or value are available where applicable. Count can be used for pluralization if present:

|=====================================================================================================
| validation                   | with option               | message                   | interpolation
| validates_confirmation_of    | -                         | :confirmation             | -
| validates_acceptance_of      | -                         | :accepted                 | -
| validates_presence_of        | -                         | :blank                    | -
| validates_length_of          | :within, :in              | :too_short                | count
| validates_length_of          | :within, :in              | :too_long                 | count
| validates_length_of          | :is                       | :wrong_length             | count
| validates_length_of          | :minimum                  | :too_short                | count
| validates_length_of          | :maximum                  | :too_long                 | count
| validates_uniqueness_of      | -                         | :taken                    | value
| validates_format_of          | -                         | :invalid                  | value
| validates_inclusion_of       | -                         | :inclusion                | value
| validates_exclusion_of       | -                         | :exclusion                | value
| validates_associated         | -                         | :invalid                  | value
| validates_numericality_of    | -                         | :not_a_number             | value
| validates_numericality_of    | :greater_than             | :greater_than             | value
| validates_numericality_of    | :greater_than_or_equal_to | :greater_than_or_equal_to | value
| validates_numericality_of    | :equal_to                 | :equal_to                 | value
| validates_numericality_of    | :less_than                | :less_than                | value
| validates_numericality_of    | :less_than_or_equal_to    | :less_than_or_equal_to    | value
| validates_numericality_of    | :odd                      | :odd                      | value
| validates_numericality_of    | :even                     | :even                     | value
|=====================================================================================================


==== Translations for the ActiveRecord error_messages_for helper

If you are using the ActiveRecord error_messages_for helper you will want to add translations for it. 

Rails ships with the following translations:

[source, ruby]
-------------------------------------------------------
en:
  activerecord:
    errors:
      template:
        header:
          one:   "1 error prohibited this {{model}} from being saved"
          other: "{{count}} errors prohibited this {{model}} from being saved"
        body:    "There were problems with the following fields:"
-------------------------------------------------------


=== Other translations and localizations

Rails uses fixed strings and other localizations, such as format strings and other format information in a couple of helpers.

TODO list helpers and available keys


== Customize your I18n setup

=== Using different backends

For several reasons the shipped Simple backend only does the "simplest thing that ever could work" _for Ruby on Rails_ <<3>> ... which means that it is only guaranteed to work for English and, as a side effect, languages that are very similar to English. Also, the simple backend is only capable of reading translations but can not dynamically store them to any format.

That does not mean you're stuck with these limitations though. The Ruby I18n gem makes it very easy to exchange the Simple backend implementation with something else that fits better for your needs. E.g. you could exchange it with Globalize's Static backend:

[source, ruby]
-------------------------------------------------------
I18n.backend = Globalize::Backend::Static.new
-------------------------------------------------------

=== Using different exception handlers

The I18n API defines the following exceptions that will be raised by backends when the corresponding unexpected conditions occur:

[source, ruby]
-------------------------------------------------------
MissingTranslationData       # no translation was found for the requested key
InvalidLocale                # the locale set to I18n.locale is invalid (e.g. nil)
InvalidPluralizationData     # a count option was passed but the translation data is not suitable for pluralization
MissingInterpolationArgument # the translation expects an interpolation argument that has not been passed
ReservedInterpolationKey     # the translation contains a reserved interpolation variable name (i.e. one of: scope, default)
UnknownFileType              # the backend does not know how to handle a file type that was added to I18n.load_path
-------------------------------------------------------

The I18n API will catch all of these exceptions when they were thrown in the backend and pass them to the default_exception_handler method. This method will re-raise all exceptions except for MissingTranslationData exceptions. When a MissingTranslationData exception has been caught it will return the exception’s error message string containing the missing key/scope. 

The reason for this is that during development you'd usually want your views to still render even though a translation is missing. 

In other contexts you might want to change this behaviour though. E.g. the default exception handling does not allow to catch missing translations during automated tests easily. For this purpose a different exception handler can be specified. The specified exception handler must be a method on the I18n module:

[source, ruby]
-------------------------------------------------------
module I18n
  def just_raise_that_exception(*args)
    raise args.first
  end
end

I18n.exception_handler = :just_raise_that_exception
-------------------------------------------------------

This would re-raise all caught exceptions including MissingTranslationData.

Another example where the default behaviour is less desirable is the Rails TranslationHelper which provides the method #t (as well as #translate). When a MissingTranslationData exception occurs in this context the helper wraps the message into a span with the css class translation_missing.

To do so the helper forces I18n#translate to raise exceptions no matter what exception handler is defined by setting the :raise option:

[source, ruby]
-------------------------------------------------------
I18n.t :foo, :raise => true # always re-raises exceptions from the backend
-------------------------------------------------------


== Resources


== Footnotes

[[[1]]] Or, to quote http://en.wikipedia.org/wiki/Internationalization_and_localization[Wikipedia]: _"Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting software for a specific region or language by adding locale-specific components and translating text."_

[[[2]]] Other backends might allow or require to use other formats, e.g. a GetText backend might allow to read GetText files.

[[[3]]] One of these reasons is that we don't want to any unnecessary load for applications that do not need any I18n capabilities, so we need to keep the I18n library as simple as possible for English. Another reason is that it is virtually impossible to implement a one-fits-all solution for all problems related to I18n for all existing languages. So a solution that allows us to exchange the entire implementation easily is appropriate anyway. This also makes it much easier to experiment with custom features and extensions.

== Changelog ==

http://rails.lighthouseapp.com/projects/16213/tickets/23[Lighthouse ticket]
