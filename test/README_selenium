I added dump_fixtures to the tasks folder and dumped my local db into the fixtures folder. I think this will be a good way of making our fixtures useful. Just run "rake dump_fixtures". To populate your test db with the fixture data run "rake db:test:prepare" and then "rake db:fixtures:load RAILS_ENV=test".

The selenium test folders require Selenium. Selenium comes in several packages: as a Gem, Selenium Core, Selenium IDE, the Selenium on Rails plugin and the Remote Control or RC plugin.

I recommend downloading the Selenium IDE http://www.openqa.org/selenium-ide/. This is a good way to get familiar with Selenium.

The test cases in the "selenium" folder are Selenese (.sel) and RSelenese (.rsel) files. Both formats can be easily created via the IDE. There are examples of both format types in the test/selenium folder. If you install the Selenium On Rails plugin you can see a Test Admin page for these Selenese files by starting the Rails server using "script/server -e test" and navigating to http://localhost:3000/selenium/. This is kind of a cool interface that allows executing one or all of the tests, organize them into test suites and watch the results. I like to populate my test db before starting the server - see comment above.

I installed the Selenium gem via "gem install selenium". With Core or the gem installed you can now run Selenium in it's immediate mode, this mode resembles Ruby's irb. See Selenium's website for the available commands.

Finally, if Ruby is needed in the test case I recommend the Remote Control or RC plugin. I provided a sample in the test/selenium_rc folder. Based on http://agilewebdevelopment.com/plugins/selenium_rc I didn't even try to do the RC setup myself. I used his plugin instead. This plugin needs some work. I had to change a few things locally to get the processes to stop properly. If we decide to use it I have a few ideas for making it more seamless. These tests don't need to go in their own folder but will fail if Selenium is not installed so I moved them to their own folder.

For now, I can see the demo staying as it is now, with this instruction file for those who want to install and run the Selenium tests. This will minimize Selenium's impact on the dev who just wants to check out the demo.

Now I need feedback. What kinds of tests do we need? Which tools do we need to support?

Helpful links:
  Automate acceptance tests with Selenium - http://www-128.ibm.com/developerworks/web/library/wa-selenium-ajax/
  Selenium - http://www.openqa.org/
  Selenium IDE - http://www.openqa.org/selenium-ide/
  Plugins - Selenium RC - Agile Web Development - http://agilewebdevelopment.com/plugins/selenium_rc
  